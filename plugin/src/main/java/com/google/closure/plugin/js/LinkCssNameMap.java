package com.google.closure.plugin.js;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;

import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;

import com.google.closure.plugin.common.Ingredients.PathValue;
import com.google.closure.plugin.common.StableCssSubstitutionMapProvider;
import com.google.closure.plugin.plan.Ingredient;
import com.google.closure.plugin.plan.PlanKey;
import com.google.closure.plugin.plan.Step;
import com.google.closure.plugin.plan.StepSource;
import com.google.common.base.Charsets;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Sets;
import com.google.common.css.OutputRenamingMapFormat;

final class LinkCssNameMap extends Step {
  final StableCssSubstitutionMapProvider substMapProvider;

  LinkCssNameMap(
      PathValue jsRenameMap,
      StableCssSubstitutionMapProvider substMapProvider) {
    super(
        PlanKey.builder("link-css-name-map").build(),
        ImmutableList.<Ingredient>of(jsRenameMap),
        Sets.immutableEnumSet(StepSource.CSS_RENAME_MAP),
        Sets.immutableEnumSet(StepSource.JS_GENERATED));
    this.substMapProvider = substMapProvider;
  }

  @Override
  public void execute(Log log) throws MojoExecutionException {
    PathValue jsRenameMap = (PathValue) inputs.get(0);

    jsRenameMap.value.getParentFile().mkdirs();
    try (OutputStream out = new FileOutputStream(jsRenameMap.value)) {
      try (Writer writer = new OutputStreamWriter(out, Charsets.UTF_8)) {
        writer.write("// Autogenerated by ");
        writer.write(getClass().getName());
        writer.write("\n");

        OutputRenamingMapFormat.CLOSURE_COMPILED_BY_WHOLE.writeRenamingMap(
            substMapProvider.get().getRenamingMap(),
            writer);
        // TODO: freeze the renaming map so no new entries can be added.
      }
    } catch (IOException ex) {
      throw new MojoExecutionException(
          "Failed to link CSS rename map to JS", ex);
    }
  }

  @Override
  public void skip(Log log) throws MojoExecutionException {
    // This is cheap, and we don't hash the renaming map, so we don't know
    // that nothing was added.
    execute(log);
  }

  @Override
  public ImmutableList<Step> extraSteps(Log log) throws MojoExecutionException {
    return ImmutableList.of();
  }

}
