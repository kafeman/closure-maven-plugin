<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.google.closure.it</groupId>
  <artifactId>demo</artifactId>
  <version>1.0-SNAPSHOT</version>

  <description>Whole Application Contract Types Demo</description>

  <properties>
    <java.source.version>1.7</java.source.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project-under-test.version>1.3.0-SNAPSHOT</project-under-test.version>
  </properties>

  <build>
    <defaultGoal>verify</defaultGoal>

    <!-- Compiles the project's HTML, CSS, JS and protos -->
    <plugins>
      <plugin>
        <groupId>com.google.closure</groupId>
        <artifactId>closure-maven-plugin</artifactId>
        <version>${project-under-test.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>generate-closure-sources</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <genJavaPackageName>com.example.demo</genJavaPackageName>
          <js>
            <!-- advanced optimizations renames the field names in the
                 generated JSON. -->
            <compilationLevel>SIMPLE_OPTIMIZATIONS</compilationLevel>

            <!-- many of these in generated proto and closure library code -->
            <!-- TODO: need a way to escalate warnings to errors for source files -->
            <jscompWarning>checkTypes</jscompWarning>
            <jscompWarning>lintChecks</jscompWarning>
            <jscompWarning>extraRequire</jscompWarning>
            <jscompWarning>missingRequire</jscompWarning>
            <jscompWarning>newCheckTypesAllChecks</jscompWarning>

            <jscompError>*</jscompError>
            <useNewTypeInference>true</useNewTypeInference>

            <conformanceConfig>src/main/js/jsconf.textproto</conformanceConfig>
          </js>
        </configuration>
      </plugin>

      <!-- Allows running the project via a Jetty web container -->
      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>9.3.11.v20160721</version>
      </plugin>

      <!-- Compiles the Java -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.5.1</version>
        <dependencies>
          <!-- Make sure @CompileTimeConstant annotations are respected -->
          <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-compiler-javac-errorprone</artifactId>
            <version>2.8</version>
          </dependency>
          <!-- override plexus-compiler-javac-errorprone's dependency on
               Error Prone with the latest version -->
          <dependency>
            <groupId>com.google.errorprone</groupId>
            <artifactId>error_prone_core</artifactId>
            <version>2.0.12</version>
          </dependency>
        </dependencies>
        <configuration>
          <compilerId>javac-with-errorprone</compilerId>
          <forceJavacCompilerUse>true</forceJavacCompilerUse>
          <source>${java.source.version}</source>
          <target>${java.source.version}</target>
          <showWarnings>true</showWarnings>
          <compilerArgs>
            <arg>-Xep:CheckReturnValue:WARN</arg>
          </compilerArgs>
        </configuration>
      </plugin>

      <!-- Assemble the project into an executable JAR -->
      <!-- TODO: use the assembly plugin instead -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.4.3</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.example.demo.Demo</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.3.1</version>
        <executions>
          <execution>
            <id>enforce</id>
            <phase>verify</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <DependencyConvergence/>
                <banDuplicateClasses>
                  <findAllDuplicates>true</findAllDuplicates>
                  <ignoreClasses>
                    <ignoreClass>javax.servlet.*</ignoreClass>
                  </ignoreClasses>
                </banDuplicateClasses>
                <!-- check uses of safe HTML constructors -->
                <fences implementation="com.google.security.fences.FencesMavenEnforcerRule">
                  <import>com.google.common.html.types:types</import>
                  <import>com.googlecode.owasp-java-html-sanitizer:html-types</import>
                  <import>com.google.template:soy</import>
                  <class>  <!-- TODO: move this into soy -->
                    <name>com.google.template.soy.data.UnsafeSanitizedContentOrdainer</name>
                    <method>
                      <name>ordainAsSafe</name>
                      <trusts>com.google.template.soy.jbcsrc.gen</trusts>
                      <rationale>
                        Template code generated by the Soy JBC-src backend can
                        ordain as safe.  Only strict templates ordain.
                      </rationale>
                    </method>
                  </class>

                  <addendum>
                    Question?  security@example.com  |  http://faqs/safecoding
                  </addendum>
                </fences>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>extra-enforcer-rules</artifactId>
            <version>1.0-beta-4</version>
          </dependency>
          <dependency>
            <groupId>com.google.security</groupId>
            <artifactId>fences-maven-enforcer-rule</artifactId>
            <version>1.9-beta</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>

  <!-- allow building to run as a demo without
       introducing a directory into plugin/src/it/demo
       which gets copied when running the plugin integration tests.

       The demo server can be kicked off via

       $ mvn -PalternateBuildDir -Dalt.build.dir=$TMP/demo-target verify \
         && java -jar $TMP/demo-target/demo-*.jar
  -->
  <profiles>
    <profile>
      <id>alternateBuildDir</id>
      <activation>
        <property>
          <name>alt.build.dir</name>
        </property>
      </activation>
      <build>
        <directory>${alt.build.dir}</directory>
      </build>
    </profile>
  </profiles>

  <dependencies>
    <dependency>
      <groupId>com.google.closure</groupId>
      <artifactId>soy-juice</artifactId>
      <version>${project-under-test.version}</version>
    </dependency>
    <!-- The protoc plugin needs protobuf-java so it can figure out which
         version of protoc to invoke. -->
    <dependency>
      <groupId>com.google.template</groupId>
      <artifactId>soy</artifactId>
      <version>2016-08-25</version>
      <exclusions>
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.protobuf</groupId>
          <artifactId>protobuf-java</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.common.html.types</groupId>
          <artifactId>types</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jetty</groupId>
      <artifactId>jetty-server</artifactId>
      <version>9.4.0.M1</version>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>3.0.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java-util</artifactId>
      <version>3.0.0</version>
      <exclusions>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.code.gson</groupId>
          <artifactId>gson</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
      <artifactId>html-types</artifactId>
      <version>20160924.1</version>
      <exclusions>
        <exclusion>
          <groupId>com.google.common.html.types</groupId>
          <artifactId>types</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <version>3.0.1</version>
    </dependency>
    <dependency>
      <groupId>com.google.common.html.types</groupId>
      <artifactId>types</artifactId>
      <version>1.0.5</version>
      <exclusions>
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.google.gwt</groupId>
          <artifactId>gwt-user</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8.2</version>
      <scope>test</scope>
    </dependency>
    <!-- We test compiled JS by running it in Rhino -->
    <dependency>
      <groupId>org.mozilla</groupId>
      <artifactId>rhino</artifactId>
      <version>1.7.7.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
